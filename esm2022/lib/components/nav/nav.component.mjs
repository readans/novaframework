import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/router";
import * as i3 from "../icon/icon.component";
import * as i4 from "../../directives/button.directive";
import * as i5 from "../modal/modal.component";
export class NavComponent {
    constructor() {
        this.showModal = false;
        this.collapsed = false;
        this.onCollapsed = new EventEmitter();
        this.onCloseModal = (closed) => this.showModal = !closed;
    }
    collapseItem(item) {
        item.collapsed = !item.collapsed;
        this.props.items.map((value) => {
            if (value !== item) {
                value.collapsed = false;
            }
        });
    }
    collapseNav() {
        this.collapsed = !this.collapsed;
        this.onCollapsed.emit(this.collapsed);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.3", ngImport: i0, type: NavComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.3", type: NavComponent, selector: "nova-nav", inputs: { props: "props" }, outputs: { onCollapsed: "onCollapsed" }, ngImport: i0, template: "<div class=\"container\">\n  <div class=\"profile\">\n    <div class=\"profile__picture\">\n      <label class=\"profile__letter\">\n        {{this.props.userName.charAt(0) | uppercase}}\n      </label>\n      <div class=\"profile__edit-icon\" (click)=\"showModal = true\">\n        <nova-icon fontIcon=\"pencil\"></nova-icon>\n      </div>\n    </div>\n    <label class=\"app-name\">{{this.props.appName}}</label>\n    <label class=\"user-name\">{{this.props.userName}}</label>\n  </div>\n  <nav>\n    <ul class=\"list\">\n      <li *ngFor=\"let item of this.props.items\" class=\"list__item\">\n        <div class=\"item\" [ngClass]=\"{'collapsable': item.options}\" (click)=\"collapseItem(item)\" [routerLink]=\"item.url\"\n          routerLinkActive=\"active\">\n          <div class=\"item__left\">\n            <nova-icon [fontIcon]=\"item.icon\"></nova-icon>\n            <!-- <label>{{item.text | specialChar | titlecase}}</label> -->\n            <h4 class=\"item__text\">{{item.text}}</h4>\n          </div>\n          <nova-icon fontIcon=\"chevron\" *ngIf=\"item.options\" [ngClass]=\"{'rotate' : item.collapsed}\"></nova-icon>\n        </div>\n        <ul *ngIf=\"item.options\" [ngClass]=\"{'hidden' : !item.collapsed}\" class=\"sublist\">\n          <li *ngFor=\"let option of item.options\" [routerLink]=\"option.url\" routerLinkActive=\"active\"\n            (click)=\"option.onAction()\" class=\"sublist__option\">\n            <nova-icon *ngIf=\"option.icon\" [fontIcon]=\"option.icon\"></nova-icon>\n            <!-- <label>{{item.text | specialChar | titlecase}}</label> -->\n            <h4 class=\"option__text\">{{option.text}}</h4>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <div class=\"list-extend\">\n      <div class=\"line\"></div>\n      <ng-content></ng-content>\n    </div>\n  </nav>\n  <div class=\"bottom-content\">\n    <button nova-button (click)=\"this.props.onLogout()\" class=\"button-logout\">\n      <nova-icon fontIcon=\"arrow-rectangle\"></nova-icon> Cerrar Sesi\u00F3n\n    </button>\n    <div class=\"info-session\">\n      <h5>\u00DAltima conexion</h5>\n      <p>{{this.props.date}}</p>\n    </div>\n  </div>\n</div>\n\n<button (click)=\"collapseNav()\" class=\"toggle-nav\">\n  <nova-icon [fontIcon]=\"collapsed ? 'close' : 'hamburger'\"></nova-icon>\n</button>\n\n<nova-modal *ngIf=\"showModal\" (closed)=\"onCloseModal($event)\">\n  <ng-content select=\"[modal]\"></ng-content>\n</nova-modal>", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i2.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "ariaCurrentWhenActive", "routerLinkActive"], outputs: ["isActiveChange"], exportAs: ["routerLinkActive"] }, { kind: "component", type: i3.IconComponent, selector: "nova-icon", inputs: ["fontIcon"] }, { kind: "directive", type: i4.ButtonDirective, selector: "[nova-button]" }, { kind: "component", type: i5.ModalComponent, selector: "nova-modal", outputs: ["closed"] }, { kind: "pipe", type: i1.UpperCasePipe, name: "uppercase" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.3", ngImport: i0, type: NavComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nova-nav', template: "<div class=\"container\">\n  <div class=\"profile\">\n    <div class=\"profile__picture\">\n      <label class=\"profile__letter\">\n        {{this.props.userName.charAt(0) | uppercase}}\n      </label>\n      <div class=\"profile__edit-icon\" (click)=\"showModal = true\">\n        <nova-icon fontIcon=\"pencil\"></nova-icon>\n      </div>\n    </div>\n    <label class=\"app-name\">{{this.props.appName}}</label>\n    <label class=\"user-name\">{{this.props.userName}}</label>\n  </div>\n  <nav>\n    <ul class=\"list\">\n      <li *ngFor=\"let item of this.props.items\" class=\"list__item\">\n        <div class=\"item\" [ngClass]=\"{'collapsable': item.options}\" (click)=\"collapseItem(item)\" [routerLink]=\"item.url\"\n          routerLinkActive=\"active\">\n          <div class=\"item__left\">\n            <nova-icon [fontIcon]=\"item.icon\"></nova-icon>\n            <!-- <label>{{item.text | specialChar | titlecase}}</label> -->\n            <h4 class=\"item__text\">{{item.text}}</h4>\n          </div>\n          <nova-icon fontIcon=\"chevron\" *ngIf=\"item.options\" [ngClass]=\"{'rotate' : item.collapsed}\"></nova-icon>\n        </div>\n        <ul *ngIf=\"item.options\" [ngClass]=\"{'hidden' : !item.collapsed}\" class=\"sublist\">\n          <li *ngFor=\"let option of item.options\" [routerLink]=\"option.url\" routerLinkActive=\"active\"\n            (click)=\"option.onAction()\" class=\"sublist__option\">\n            <nova-icon *ngIf=\"option.icon\" [fontIcon]=\"option.icon\"></nova-icon>\n            <!-- <label>{{item.text | specialChar | titlecase}}</label> -->\n            <h4 class=\"option__text\">{{option.text}}</h4>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <div class=\"list-extend\">\n      <div class=\"line\"></div>\n      <ng-content></ng-content>\n    </div>\n  </nav>\n  <div class=\"bottom-content\">\n    <button nova-button (click)=\"this.props.onLogout()\" class=\"button-logout\">\n      <nova-icon fontIcon=\"arrow-rectangle\"></nova-icon> Cerrar Sesi\u00F3n\n    </button>\n    <div class=\"info-session\">\n      <h5>\u00DAltima conexion</h5>\n      <p>{{this.props.date}}</p>\n    </div>\n  </div>\n</div>\n\n<button (click)=\"collapseNav()\" class=\"toggle-nav\">\n  <nova-icon [fontIcon]=\"collapsed ? 'close' : 'hamburger'\"></nova-icon>\n</button>\n\n<nova-modal *ngIf=\"showModal\" (closed)=\"onCloseModal($event)\">\n  <ng-content select=\"[modal]\"></ng-content>\n</nova-modal>" }]
        }], ctorParameters: function () { return []; }, propDecorators: { props: [{
                type: Input
            }], onCollapsed: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25vdmFmcmFtZXdvcmsvc3JjL2xpYi9jb21wb25lbnRzL25hdi9uYXYuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbm92YWZyYW1ld29yay9zcmMvbGliL2NvbXBvbmVudHMvbmF2L25hdi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7O0FBT3ZFLE1BQU0sT0FBTyxZQUFZO0lBUXZCO1FBTkEsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUczQixjQUFTLEdBQVksS0FBSyxDQUFDO1FBQ2pCLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQWtCM0MsaUJBQVksR0FBRyxDQUFDLE1BQWUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQWhCdEQsQ0FBQztJQUVqQixZQUFZLENBQUMsSUFBVTtRQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFXLEVBQUUsRUFBRTtZQUNwQyxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7Z0JBQ2xCLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2FBQ3pCO1FBQ0gsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN4QyxDQUFDOzhHQXRCVSxZQUFZO2tHQUFaLFlBQVkscUhDUHpCLDY1RUF5RGE7OzJGRGxEQSxZQUFZO2tCQUp4QixTQUFTOytCQUNFLFVBQVU7MEVBTVgsS0FBSztzQkFBYixLQUFLO2dCQUdJLFdBQVc7c0JBQXBCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSXRlbSwgTmF2IH0gZnJvbSAnLi9uYXYnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdub3ZhLW5hdicsXG4gIHRlbXBsYXRlVXJsOiAnLi9uYXYuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBOYXZDb21wb25lbnQge1xuXG4gIHNob3dNb2RhbDogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBwcm9wcyE6IE5hdjtcblxuICBjb2xsYXBzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQE91dHB1dCgpIG9uQ29sbGFwc2VkID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgY29sbGFwc2VJdGVtKGl0ZW06IEl0ZW0pIHtcbiAgICBpdGVtLmNvbGxhcHNlZCA9ICFpdGVtLmNvbGxhcHNlZDtcbiAgICB0aGlzLnByb3BzLml0ZW1zIS5tYXAoKHZhbHVlOiBJdGVtKSA9PiB7XG4gICAgICBpZiAodmFsdWUgIT09IGl0ZW0pIHtcbiAgICAgICAgdmFsdWUuY29sbGFwc2VkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNvbGxhcHNlTmF2KCkge1xuICAgIHRoaXMuY29sbGFwc2VkID0gIXRoaXMuY29sbGFwc2VkO1xuICAgIHRoaXMub25Db2xsYXBzZWQuZW1pdCh0aGlzLmNvbGxhcHNlZCk7XG4gIH1cblxuICByZWFkb25seSBvbkNsb3NlTW9kYWwgPSAoY2xvc2VkOiBib29sZWFuKSA9PiB0aGlzLnNob3dNb2RhbCA9ICFjbG9zZWQ7XG5cbn1cbiIsIjxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgPGRpdiBjbGFzcz1cInByb2ZpbGVcIj5cbiAgICA8ZGl2IGNsYXNzPVwicHJvZmlsZV9fcGljdHVyZVwiPlxuICAgICAgPGxhYmVsIGNsYXNzPVwicHJvZmlsZV9fbGV0dGVyXCI+XG4gICAgICAgIHt7dGhpcy5wcm9wcy51c2VyTmFtZS5jaGFyQXQoMCkgfCB1cHBlcmNhc2V9fVxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJwcm9maWxlX19lZGl0LWljb25cIiAoY2xpY2spPVwic2hvd01vZGFsID0gdHJ1ZVwiPlxuICAgICAgICA8bm92YS1pY29uIGZvbnRJY29uPVwicGVuY2lsXCI+PC9ub3ZhLWljb24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8bGFiZWwgY2xhc3M9XCJhcHAtbmFtZVwiPnt7dGhpcy5wcm9wcy5hcHBOYW1lfX08L2xhYmVsPlxuICAgIDxsYWJlbCBjbGFzcz1cInVzZXItbmFtZVwiPnt7dGhpcy5wcm9wcy51c2VyTmFtZX19PC9sYWJlbD5cbiAgPC9kaXY+XG4gIDxuYXY+XG4gICAgPHVsIGNsYXNzPVwibGlzdFwiPlxuICAgICAgPGxpICpuZ0Zvcj1cImxldCBpdGVtIG9mIHRoaXMucHJvcHMuaXRlbXNcIiBjbGFzcz1cImxpc3RfX2l0ZW1cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW1cIiBbbmdDbGFzc109XCJ7J2NvbGxhcHNhYmxlJzogaXRlbS5vcHRpb25zfVwiIChjbGljayk9XCJjb2xsYXBzZUl0ZW0oaXRlbSlcIiBbcm91dGVyTGlua109XCJpdGVtLnVybFwiXG4gICAgICAgICAgcm91dGVyTGlua0FjdGl2ZT1cImFjdGl2ZVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtX19sZWZ0XCI+XG4gICAgICAgICAgICA8bm92YS1pY29uIFtmb250SWNvbl09XCJpdGVtLmljb25cIj48L25vdmEtaWNvbj5cbiAgICAgICAgICAgIDwhLS0gPGxhYmVsPnt7aXRlbS50ZXh0IHwgc3BlY2lhbENoYXIgfCB0aXRsZWNhc2V9fTwvbGFiZWw+IC0tPlxuICAgICAgICAgICAgPGg0IGNsYXNzPVwiaXRlbV9fdGV4dFwiPnt7aXRlbS50ZXh0fX08L2g0PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxub3ZhLWljb24gZm9udEljb249XCJjaGV2cm9uXCIgKm5nSWY9XCJpdGVtLm9wdGlvbnNcIiBbbmdDbGFzc109XCJ7J3JvdGF0ZScgOiBpdGVtLmNvbGxhcHNlZH1cIj48L25vdmEtaWNvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDx1bCAqbmdJZj1cIml0ZW0ub3B0aW9uc1wiIFtuZ0NsYXNzXT1cInsnaGlkZGVuJyA6ICFpdGVtLmNvbGxhcHNlZH1cIiBjbGFzcz1cInN1Ymxpc3RcIj5cbiAgICAgICAgICA8bGkgKm5nRm9yPVwibGV0IG9wdGlvbiBvZiBpdGVtLm9wdGlvbnNcIiBbcm91dGVyTGlua109XCJvcHRpb24udXJsXCIgcm91dGVyTGlua0FjdGl2ZT1cImFjdGl2ZVwiXG4gICAgICAgICAgICAoY2xpY2spPVwib3B0aW9uLm9uQWN0aW9uKClcIiBjbGFzcz1cInN1Ymxpc3RfX29wdGlvblwiPlxuICAgICAgICAgICAgPG5vdmEtaWNvbiAqbmdJZj1cIm9wdGlvbi5pY29uXCIgW2ZvbnRJY29uXT1cIm9wdGlvbi5pY29uXCI+PC9ub3ZhLWljb24+XG4gICAgICAgICAgICA8IS0tIDxsYWJlbD57e2l0ZW0udGV4dCB8IHNwZWNpYWxDaGFyIHwgdGl0bGVjYXNlfX08L2xhYmVsPiAtLT5cbiAgICAgICAgICAgIDxoNCBjbGFzcz1cIm9wdGlvbl9fdGV4dFwiPnt7b3B0aW9uLnRleHR9fTwvaDQ+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvbGk+XG4gICAgPC91bD5cbiAgICA8ZGl2IGNsYXNzPVwibGlzdC1leHRlbmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJsaW5lXCI+PC9kaXY+XG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPC9kaXY+XG4gIDwvbmF2PlxuICA8ZGl2IGNsYXNzPVwiYm90dG9tLWNvbnRlbnRcIj5cbiAgICA8YnV0dG9uIG5vdmEtYnV0dG9uIChjbGljayk9XCJ0aGlzLnByb3BzLm9uTG9nb3V0KClcIiBjbGFzcz1cImJ1dHRvbi1sb2dvdXRcIj5cbiAgICAgIDxub3ZhLWljb24gZm9udEljb249XCJhcnJvdy1yZWN0YW5nbGVcIj48L25vdmEtaWNvbj4gQ2VycmFyIFNlc2nDs25cbiAgICA8L2J1dHRvbj5cbiAgICA8ZGl2IGNsYXNzPVwiaW5mby1zZXNzaW9uXCI+XG4gICAgICA8aDU+w5psdGltYSBjb25leGlvbjwvaDU+XG4gICAgICA8cD57e3RoaXMucHJvcHMuZGF0ZX19PC9wPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuXG48YnV0dG9uIChjbGljayk9XCJjb2xsYXBzZU5hdigpXCIgY2xhc3M9XCJ0b2dnbGUtbmF2XCI+XG4gIDxub3ZhLWljb24gW2ZvbnRJY29uXT1cImNvbGxhcHNlZCA/ICdjbG9zZScgOiAnaGFtYnVyZ2VyJ1wiPjwvbm92YS1pY29uPlxuPC9idXR0b24+XG5cbjxub3ZhLW1vZGFsICpuZ0lmPVwic2hvd01vZGFsXCIgKGNsb3NlZCk9XCJvbkNsb3NlTW9kYWwoJGV2ZW50KVwiPlxuICA8bmctY29udGVudCBzZWxlY3Q9XCJbbW9kYWxdXCI+PC9uZy1jb250ZW50PlxuPC9ub3ZhLW1vZGFsPiJdfQ==